@document.meta
title: README
id: acd163a9-50a5-4655-9871-d47dfb6ff738
workspace: default
created: 2023-11-20T12:42:56-0500
updated: 2024-07-11T00:58:57-0500
@end
** Ideals::
   Nyoom has been steamlining efforts for an alternative package manager, e.g:: {https://github.com/nyoom-engineering/alpacka}[alpacka], so in technicality nix is no longer needed. However, it would be stupid to rely so heavily on fetcher. As a result, adding a HM-module would be more than fitting. Additionally, there's also an `packages` %for 'nix build'% and `apps` %for 'nix run'%.
  Now whether I push this upstream is a different matter entirely, as curtailing this to open customization seems fitting. Two of the main features I want to integrate are as follows::

** Future::
   - (=) Port configs to nickel via `fromNcl` {https://github.com/nickel-lang/nickel-nix}[Nickel-Nix API]
   - (?) Find a way to expose a JSON for Modules::
   -- Perhaps Adding a global RTP table %much like _G.nyoom% which can be converted to some modules.json file, and then use Nix  to enable the respective List of LSPs in HM.This can be achieved by adding a (nix!) macro, which then throws the `../fnl/modules.fnl` into a `.modules.json` via the "json_encode" lua function, and have that be parsed via nix's `builtins.fromJSON` function.
   - (?) Create Custom Module/Macro Snippets Using Luasnips
   - (-) Fix `nix run` issue
   -- Currently it fails to load sync if the `/tmp` directory doesn't exist. This Makes storing the luajit cache suboptimal, as before I was simply just going to pass the bytecompiled code into a DRV, and just run `nvim -u ${drv}/init.lua`.

   @code rust

   @end
